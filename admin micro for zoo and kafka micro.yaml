#Createdby CryptoPanda , Inspirationo : Instructor Stephane maarek- Udemy, Friend & Mentor : RajYadhav : https://www.linkedin.com/in/raj-yadhav-54b2aa145/ 
#this is a test setup for the previously provided kafka and zookeeper setup in micro instances on AWS using cloudformation 

## i have integrated jmx and node exporter on the application machine and setup alert manager and prometheus to capture those alerts from app machine
# i skipped grafana in this setup but its easy to setup and configure and apply sample dashboard available on github
#added kafka monitor to produce and consume msgs in real time 
#added docker and zoonavigator for ease of visualization 

#Creating Parameters


Parameters:
    MySubnetIDadmin:
        Description: Subnet IDs that is a List of Subnet Id
        Type: 'AWS::EC2::Subnet::Id'
        Default: "subnet-ca59f395"
    KeyName:
        Description: 'For SSH access'
        Type: 'AWS::EC2::KeyPair::KeyName'
    SSHLocation:
        Description: The IP address range that can be used to SSH to the EC2 instances
        Type: String
        MinLength: '9'
        MaxLength: '18'
        Default: '0.0.0.0/0'
        AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
        ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.
    PrivateIpAddress3:
        Description: private ip of kafka admin
        Type: String
        Default: "172.31.32.11"
Resources:
    ENIadmin:
      Type: AWS::EC2::NetworkInterface
      Properties:
         Description: Private IP for admin
         SourceDestCheck: 'false'
         GroupSet:
         - Fn::ImportValue: EC2Security
         SubnetId: !Ref MySubnetIDadmin
         PrivateIpAddress: !Ref PrivateIpAddress3
    EC2Instanceadmin:
        Type: "AWS::EC2::Instance"
        Properties:
            ImageId: "ami-04bf6dcdc9ab498ca"
            InstanceType: "t2.micro"
            KeyName: !Ref KeyName
            AvailabilityZone: !Sub "${AWS::Region}b"
            NetworkInterfaces:
              -
                NetworkInterfaceId: !Ref ENIadmin
                DeviceIndex: 0
            SourceDestCheck: true
            Tags: 
              - 
                Key: "Name"
                Value: "AdminMOnitor"
            HibernationOptions: 
                Configured: false
            UserData:
                Fn::Base64: !Sub |
                    #!/bin/bash -xe
                    sudo yum update -y
                    sudo yum install -y docker
                    sudo systemctl start docker.service
                    sudo usermod -a -G docker ec2-user
                    sudo curl -L https://github.com/docker/compose/releases/download/1.21.2/docker-compose-$(uname -s)-$(uname -m) -o /usr/local/bin/docker-compose
                    sudo chmod +x /usr/local/bin/docker-compose
                    sudo mkdir -p /etc/docker/compose/zoonavigator/
                    sudo yum install -y git
                    sudo yum install -y java-1.8.0-openjdk-devel
                    sudo wget https://github.com/linkedin/kafka-monitor/archive/2.0.1.tar.gz
                    sudo tar -xzf 2.0.1.tar.gz
                    sudo mv /kafka-monitor-2.0.1 /kafka-monitor
                    sudo rm /kafka-monitor/config/kafka-monitor.properties
                    sudo rm 2.0.1.tar.gz
                    sudo wget https://github.com/prometheus/prometheus/releases/download/v2.3.2/prometheus-2.3.2.linux-amd64.tar.gz
                    sudo tar -xzf prometheus-*.tar.gz
                    sudo mv /prometheus-2.3.2.linux-amd64 /prometheus
                    sudo rm prometheus-*.tar.gz
                    sudo chown ec2-user:ec2-user /prometheus
                    sudo rm /prometheus/prometheus.yml
                    sudo wget -P /prometheus https://github.com/prometheus/alertmanager/releases/download/v0.21.0/alertmanager-0.21.0.linux-amd64.tar.gz

                    sudo tar -xzf /prometheus/alertmanager-0.21.0.linux-amd64.tar.gz 
                    sudo mkdir -p /home/ec2-user/gg/data
                    sudo chown ec2-user:ec2-user /home/ec2-user/gg

                    sudo mv alertmanager-0.21.0.linux-amd64 prometheus/alertmanager

                    sudo rm prometheus/alertmanager/alertmanager.yml

                    /opt/aws/bin/cfn-init -s ${AWS::StackId} -r EC2Instanceadmin --region ${AWS::Region} || error_exit 'failed to run cfn-init'

                    sudo systemctl daemon-reload
                    
                    sleep 30
                     # All done so signal success

                     /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackId} --resource EC2Instanceadmin --region ${AWS::Region}
        Metadata:
            AWS::CloudFormation::Init:
                config:
                      files:
                        "/etc/systemd/system/docker-compose@.service":
                            content: |
                                # /etc/systemd/system/docker-compose@.service
                                # From: https://github.com/docker/compose/issues/4266#issuecomment-302813256
                                [Unit]
                                Description=%i service with docker compose
                                Requires=docker.service
                                After=docker.service

                                [Service]
                                Restart=always

                                WorkingDirectory=/etc/docker/compose/%i

                                # Remove old containers, images and volumes
                                ExecStartPre=/usr/local/bin/docker-compose down -v
                                ExecStartPre=/usr/local/bin/docker-compose rm -fv
                                ExecStartPre=-/bin/bash -c 'docker volume ls -qf "name=%i_" | xargs docker volume rm'
                                ExecStartPre=-/bin/bash -c 'docker network ls -qf "name=%i_" | xargs docker network rm'
                                ExecStartPre=-/bin/bash -c 'docker ps -aqf "name=%i_*" | xargs docker rm'

                                # Compose up
                                ExecStart=/usr/local/bin/docker-compose up

                                # Compose down, remove containers and volumes
                                ExecStop=/usr/local/bin/docker-compose down -v

                                [Install]
                                WantedBy=multi-user.target
                            owner: root
                            group: root
                            mode: "000755"
                        "/etc/docker/compose/zoonavigator/docker-compose.yml":
                            content: |
                                version: '2.1'
                                services:
                                  web:
                                    image: elkozmon/zoonavigator-web:0.5.0
                                    container_name: zoonavigator-web
                                    ports:
                                     - "7070:7070"
                                    environment:
                                      WEB_HTTP_PORT: 7070
                                      API_HOST: "api"
                                      API_PORT: 9000
                                    depends_on:
                                     - api
                                  api:
                                    image: elkozmon/zoonavigator-api:0.5.0
                                    container_name: zoonavigator-api
                                    environment:
                                      API_HTTP_PORT: 9000
                            owner: ec2-user 
                            mode: "000644"
                            group: ec2-user
                        "/kafka-monitor/config/kafka-monitor.properties":
                            content: |
                                {
                                  "single-cluster-monitor": {
                                    "class.name": "com.linkedin.kmf.apps.SingleClusterMonitor",
                                    "topic": "kafka-monitor-topic",
                                    "zookeeper.connect": "172.31.16.10:2181",
                                    "bootstrap.servers": "172.31.32.10:9092,172.31.80.10:9092,172.31.0.10:9092",
                                    "produce.record.delay.ms": 100,
                                    "topic-management.topicCreationEnabled": true,
                                    "topic-management.replicationFactor" : 3,
                                    "topic-management.partitionsToBrokersRatio" : 2.0,
                                    "topic-management.rebalance.interval.ms" : 600000,
                                    "topic-management.topicFactory.props": {
                                    },
                                    "topic-management.topic.props": {
                                      "retention.ms": "3600000"
                                    },
                                    "produce.producer.props": {
                                      "client.id": "kmf-client-id"
                                    },

                                    "consume.latency.sla.ms": "20000",
                                    "consume.consumer.props": {

                                    }

                                  },

                                  "jetty-service": {
                                    "class.name": "com.linkedin.kmf.services.JettyService",
                                    "jetty.port": 8000
                                  },

                                  "jolokia-service": {
                                    "class.name": "com.linkedin.kmf.services.JolokiaService"
                                  },


                                  "reporter-service": {
                                    "class.name": "com.linkedin.kmf.services.DefaultMetricsReporterService",
                                    "report.interval.sec": 1,
                                    "report.metrics.list": [
                                      "kmf:type=kafka-monitor:offline-runnable-count",
                                      "kmf.services:type=produce-service,name=*:produce-availability-avg",
                                      "kmf.services:type=consume-service,name=*:consume-availability-avg",
                                      "kmf.services:type=produce-service,name=*:records-produced-total",
                                      "kmf.services:type=consume-service,name=*:records-consumed-total",
                                      "kmf.services:type=consume-service,name=*:records-lost-total",
                                      "kmf.services:type=consume-service,name=*:records-duplicated-total",
                                      "kmf.services:type=consume-service,name=*:records-delay-ms-avg",
                                      "kmf.services:type=produce-service,name=*:records-produced-rate",
                                      "kmf.services:type=produce-service,name=*:produce-error-rate",
                                      "kmf.services:type=consume-service,name=*:consume-error-rate"
                                    ]
                                  }

                                }
                            owner: root
                            group: root
                            mode: '000755'
                        "/prometheus/prometheus.yml":
                            content: !Sub 
                                - |
                                  global:
                                   scrape_interval: 10s
                                   evaluation_interval: 10s

                                  rule_files:
                                   - /prometheus/alert.rules.yml

                                  alerting:
                                    alertmanagers:
                                    - static_configs:
                                       - targets:
                                          - localhost:9093

                                  scrape_configs:
                                   - job_name: 'kafka'
                                     static_configs:
                                      - targets:
                                        - ${kafka_1}:8080
                                        - ${kafka_2}:8080
                                        - ${kafka_3}:8080
                                   - job_name: 'kafka machine node'
                                     static_configs:
                                      - targets:
                                        - ${kafka_1}:9100
                                        - ${kafka_2}:9100
                                        - ${kafka_3}:9100
                                - 
                                  kafka_1: !ImportValue Kafka1ENI
                                  kafka_2: !ImportValue Kafka2ENI
                                  kafka_3: !ImportValue kafka3ENI
                            owner: ec2-user
                            group: ec2-user
                            mode: '000644'
                        "/etc/systemd/system/prometheus.service":
                            content: |
                              # /etc/systemd/system/prometheus.service
                              [Unit]
                              Description=Prometheus Server
                              Documentation=https://prometheus.io/docs/introduction/overview/
                              After=network-online.target

                              [Service]
                              User=ec2-user
                              ExecStart=/prometheus/prometheus --config.file=/prometheus/prometheus.yml --storage.tsdb.path=/prometheus/data

                              [Install]
                              WantedBy=multi-user.target
                            owner: root
                            group: root
                            mode: '000755'
                        "/etc/systemd/system/kafka-monitor.service":
                            content: |
                              [Unit]
                              Description=Kafka Monitor
                              After=network.target

                              [Service]
                              User=ec2-user
                              Group=ec2-user
                              WorkingDirectory=/home/ec2-user/kafka-monitor
                              ExecStart=/home/ec2-user/kafka-monitor/bin/kafka-monitor-start.sh /home/ec2-user/kafka-monitor/config/kafka-monitor.properties
                              SuccessExitStatus=143

                              [Install]
                              WantedBy=multi-user.target
                            owner: root
                            group: root
                            mode: '000755'

                        "/prometheus/alert.rules.yml":
                            content: |
                              groups:
                              - name: AllInstances
                                rules:
                                - alert: InstanceDown
                                   # Condition for alerting
                                   expr: up == 0
                                   for: 1m
                                   # Annotation - additional informational labels to store more information
                                   annotations:
                                     title: 'Instance {{ $labels.instance }} down'
                                     description: '{{ $labels.instance }} of job {{ $labels.job }} has been down for more than 1 minute.'
                                   # Labels - additional labels to be attached to the alert
                                   labels:
                                       severity: 'critical'
                            owner: ec2-user
                            group: ec2-user
                            mode: '000644'
                        "/prometheus/alertmanager/alertmanager.yml":
                            content: |
                                global:
                                 resolve_timeout: 1m
                                 slack_api_url: 'https://hooks.slack.com/services/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'

                                route:
                                 receiver: 'slack-notifications'

                                receivers:
                                - name: 'slack-notifications'
                                  slack_configs:
                                       - channel: '#sysops-test'
                                         send_resolved: true
                            owner: ec2-user
                            group: ec2-user
                            mode: '000644'
                        "/etc/systemd/system/alertmanager.service":
                            content: |
                              [Unit]
                              Description=Alertmanager server service
                              After=network-online.target

                              [Service]
                              User=root
                              Group=root

                              ExecStart=/prometheus/alertmanager/alertmanager --config.file=/prometheus/alertmanager/alertmanager.yml --storage.path=/home/ec2-user/gg/data
                              [Install]
                              WantedBy=multi-user.target
                            owner: root
                            group: root
                            mode: '000755'

                      commands:

                        enablezoonavdocker:
                            command: "sudo systemctl enable docker-compose@zoonavigator"
                            ignoreError: 'false'
                        startdockerzoonavigator:
                            command: "sudo systemctl start docker-compose@zoonavigator"
                            ignoreError: 'false'
                        startgradlewjar:
                            command: "sudo ./gradlew jar"
                            cwd : "/kafka-monitor"
                        startalertmanager:
                            command: "sudo systemctl enable alertmanager.service"
                            ignoreError: 'false'
                        startalertmanager2:
                            command: "sudo systemctl start alertmanager.service"
                            ignoreError: 'false'
                        startprometheus:
                            command: "sudo systemctl enable prometheus.service"
                            ignoreError: 'false'
                        startprometheus2:
                            command: "sudo systemctl start prometheus.service"
                            ignoreError: 'false'

            CreationPolicy:
                ResourceSignal:
                  Timeout: PT5M



               
